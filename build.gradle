apply plugin: 'java'
apply plugin: 'osgi'
apply plugin: 'eclipse'

project.group   = 'de.esoco'

sourceCompatibility = 1.8

repositories
{
    jcenter()
}

tasks.withType(JavaCompile) {
	// enable compilation of internal sun classes
	// see http://stackoverflow.com/questions/12554829/
    options.compilerArgs << '-XDignore.symbol.file'
    options.fork = true
    options.forkOptions.executable = 'javac'
}

tasks.withType(Javadoc) {
    failOnError = false
    options.addStringOption('XDignore.symbol.file')
}


dependencies
{
 	if (project(':objectrelations').getProjectDir().exists())
	{
		compile project(':objectrelations')
	}
	else
	{
		compile 'org.obrel:objectrelations:1.1.+'
	}

    testCompile 'junit:junit:4.+'
}

task sourceJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourceJar
    archives javadocJar
}

// ----------- Bintray Release -----------

buildscript {
    repositories { jcenter() }
    dependencies { classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7' }
}
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven'

bintray {
	user = project.hasProperty('bintrayUser') ?
				project.property('bintrayUser') :
				System.getenv('BINTRAY_USER')
	key = project.hasProperty('bintrayApiKey') ?
				project.property('bintrayApiKey') :
				System.getenv('BINTRAY_API_KEY')
    configurations = ['archives']
    publish = true

	pkg {
		repo = 'sdack'
		name = project.name
		version {
			name = project.version
	    }
    }
}

task buildSyncServiceTool(type: Jar) {
    archiveName = 'mss.jar'

    manifest {
        attributes 'Main-Class': 'de.esoco.lib.service.ModificationSyncServiceTool',
                   'Implementation-Title': 'ModificationSyncService Command Line Tool',
	        	   'Implementation-Version': project.version,
	               'Built-Date': new Date(),
                   'Built-JDK': System.getProperty('java.version')
    }

	from { configurations.compile.collect
		{ it.isDirectory() ? it : zipTree(it) }
	}
    with jar
}
