//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// This file is a part of the 'esoco-lib' project.
// Copyright 2018 Elmar Sonnenschein, esoco GmbH, Flensburg, Germany
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	  http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
package de.esoco.lib.comm.smtp;

import de.esoco.lib.comm.Endpoint;
import de.esoco.lib.comm.EndpointFunction;
import de.esoco.lib.comm.SmtpEndpoint;
import de.esoco.lib.logging.LogAspect;
import de.esoco.lib.logging.LogLevel;
import de.esoco.lib.logging.LogRecord;
import org.obrel.core.ObjectRelations;

import java.util.Collection;
import java.util.Date;

import static de.esoco.lib.comm.CommunicationRelationTypes.ENDPOINT_ADDRESS;
import static de.esoco.lib.comm.CommunicationRelationTypes.PASSWORD;
import static de.esoco.lib.comm.CommunicationRelationTypes.USER_NAME;
import static de.esoco.lib.comm.smtp.Email.email;

/**
 * A log aspect that sends log messages as emails via an {@link SmtpEndpoint}.
 * By default the minimum log level (see {@link LogAspect#MIN_LOG_LEVEL}) will
 * be set to {@link LogLevel#ERROR} and loosening this constraint that should be
 * handled with caution because depending on the log volume that could put the
 * target mail server under heavy load.
 *
 * @author eso
 */
public class MailLogging extends LogAspect<Email> {

	private final Endpoint mailServer;

	private final Email emailTemplate = email();

	/**
	 * Creates a new instance and sets the minimum log level to ERROR.
	 *
	 * @param smtpEndpointUrl The endpoint URL of the SMTP server
	 */
	public MailLogging(String smtpEndpointUrl) {
		set(MIN_LOG_LEVEL, LogLevel.ERROR);

		mailServer = Endpoint.at(smtpEndpointUrl);
	}

	/**
	 * Sets the sender of the logging emails.
	 *
	 * @param sender The email sender
	 * @return This instance for fluent invocation
	 */
	public MailLogging from(String sender) {
		emailTemplate.from(sender);

		return this;
	}

	/**
	 * Sets the authentication credentials.
	 *
	 * @param userName The user name for authentication with the mail server
	 * @param password The authentication password
	 * @return This instance for fluent invocation
	 */
	public MailLogging loginAs(String userName, String password) {
		mailServer.set(USER_NAME, userName);
		mailServer.set(PASSWORD, password);

		return this;
	}

	/**
	 * Sets the receiver of the logging emails.
	 *
	 * @param receiver The email receiver
	 * @return This instance for fluent invocation
	 */
	public MailLogging to(String receiver) {
		emailTemplate.to(receiver);

		return this;
	}

	/**
	 * Adds the endpoint address to the string representation generated by the
	 * superclass.
	 *
	 * @return The string representation for this instance
	 */
	@Override
	public String toString() {
		return String.format("%s(%s)", super.toString(),
			mailServer.get(ENDPOINT_ADDRESS));
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected Email createLogObject(LogRecord logRecord) {
		String message = logRecord.format(get(MIN_STACK_LOG_LEVEL));
		Email email = new Email();

		ObjectRelations.copyRelations(emailTemplate, email, false);

		email.subject(
			String.format("[%1$s]%2$tF %2$tT: %3$s", logRecord.getLevel(),
				new Date(logRecord.getTime()), logRecord.getMessage()));
		email.message(message);

		return email;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected String getLogInitMessage() {
		return "Starting logging to mail server at " +
			mailServer.get(ENDPOINT_ADDRESS);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected void processLogObjects(Collection<Email> logEmails)
		throws Exception {
		EndpointFunction<Email, Void> sendMail =
			SmtpEndpoint.sendMail().on(mailServer);

		for (Email email : logEmails) {
			sendMail.send(email);
		}
	}
}
