apply plugin: 'java-library'
apply plugin: 'eclipse'

project.group   = 'de.esoco'

sourceCompatibility = 1.8

repositories
{
    jcenter()
}

// substitute local project dependencies if available
configurations.all {
    resolutionStrategy.dependencySubstitution.all { DependencySubstitution dependency ->
        if (dependency.requested instanceof ModuleComponentSelector && 
            ["org.obrel" ,"de.esoco"].contains(dependency.requested.group)) {
            def targetProject = findProject(":${dependency.requested.module}")
            if (targetProject != null) {
                dependency.useTarget (targetProject, "prefer local project")
                if (name.startsWith("compile")) // only log once
                    println "$project.name using local project $targetProject as dependency"
            }
        }
    }
}

dependencies
{
	api 'org.obrel:objectrelations:1.4.+'

	testImplementation platform('org.junit:junit-bom:5.5.2')	
	testImplementation 'org.junit.jupiter:junit-jupiter'
	testImplementation 'junit:junit:4.12'
	
	testRuntimeOnly 'org.junit.vintage:junit-vintage-engine' // JUnit4 support
}

task sourceJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourceJar
    archives javadocJar
}

tasks.withType(Javadoc) {
    failOnError = false
    options.addBooleanOption('quiet', true)
    
    if (JavaVersion.current().isJava8Compatible()) {
        options.addBooleanOption('Xdoclint:none', true) 
    }
}

task mss(type: Jar) {
    archiveName = 'mss.jar'

    manifest {
        attributes 'Implementation-Title': 'ModificationSyncService Tool',
	        	   'Implementation-Version': '1.0.0',
	               'Built-Date': new Date(),
                   'Built-JDK': System.getProperty('java.version'),
                   'Main-Class': 'de.esoco.lib.service.ModificationSyncServiceTool'

    }

	from { configurations.compile.collect
		{ it.isDirectory() ? it : zipTree(it) }
	}
    
    with jar
}

// ----------- Bintray Release -----------

buildscript {
    repositories { jcenter() }
    dependencies { classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7' }
}
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven'

bintray {
	user = project.hasProperty('bintrayUser') ?
				project.property('bintrayUser') :
				System.getenv('BINTRAY_USER')
	key = project.hasProperty('bintrayApiKey') ?
				project.property('bintrayApiKey') :
				System.getenv('BINTRAY_API_KEY')
    configurations = ['archives']
    publish = true

	pkg {
		repo = 'sdack'
		name = project.name
		version {
			name = project.version
	    }
    }
}
